// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: grpcService/services.proto

package grpcService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRoomClient is the client API for ChatRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomClient interface {
	// send message (for test purpose)
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*SentMessageStatus, error)
	// join chat, gain ability to send and receive message from server
	JoinChat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_JoinChatClient, error)
	// login using a pair of username and chat password
	Login(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*AuthenticationResult, error)
}

type chatRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomClient(cc grpc.ClientConnInterface) ChatRoomClient {
	return &chatRoomClient{cc}
}

func (c *chatRoomClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*SentMessageStatus, error) {
	out := new(SentMessageStatus)
	err := c.cc.Invoke(ctx, "/grpcService.ChatRoom/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinChat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatRoom_ServiceDesc.Streams[0], "/grpcService.ChatRoom/JoinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomJoinChatClient{stream}
	return x, nil
}

type ChatRoom_JoinChatClient interface {
	Send(*ChatMessage) error
	Recv() (*SentMessageStatus, error)
	grpc.ClientStream
}

type chatRoomJoinChatClient struct {
	grpc.ClientStream
}

func (x *chatRoomJoinChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRoomJoinChatClient) Recv() (*SentMessageStatus, error) {
	m := new(SentMessageStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatRoomClient) Login(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*AuthenticationResult, error) {
	out := new(AuthenticationResult)
	err := c.cc.Invoke(ctx, "/grpcService.ChatRoom/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomServer is the server API for ChatRoom service.
// All implementations must embed UnimplementedChatRoomServer
// for forward compatibility
type ChatRoomServer interface {
	// send message (for test purpose)
	SendMessage(context.Context, *ChatMessage) (*SentMessageStatus, error)
	// join chat, gain ability to send and receive message from server
	JoinChat(ChatRoom_JoinChatServer) error
	// login using a pair of username and chat password
	Login(context.Context, *UserCredentials) (*AuthenticationResult, error)
	mustEmbedUnimplementedChatRoomServer()
}

// UnimplementedChatRoomServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomServer struct {
}

func (UnimplementedChatRoomServer) SendMessage(context.Context, *ChatMessage) (*SentMessageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatRoomServer) JoinChat(ChatRoom_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChatRoomServer) Login(context.Context, *UserCredentials) (*AuthenticationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatRoomServer) mustEmbedUnimplementedChatRoomServer() {}

// UnsafeChatRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomServer will
// result in compilation errors.
type UnsafeChatRoomServer interface {
	mustEmbedUnimplementedChatRoomServer()
}

func RegisterChatRoomServer(s grpc.ServiceRegistrar, srv ChatRoomServer) {
	s.RegisterService(&ChatRoom_ServiceDesc, srv)
}

func _ChatRoom_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcService.ChatRoom/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SendMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRoomServer).JoinChat(&chatRoomJoinChatServer{stream})
}

type ChatRoom_JoinChatServer interface {
	Send(*SentMessageStatus) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatRoomJoinChatServer struct {
	grpc.ServerStream
}

func (x *chatRoomJoinChatServer) Send(m *SentMessageStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRoomJoinChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatRoom_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcService.ChatRoom/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).Login(ctx, req.(*UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoom_ServiceDesc is the grpc.ServiceDesc for ChatRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcService.ChatRoom",
	HandlerType: (*ChatRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatRoom_SendMessage_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChatRoom_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChat",
			Handler:       _ChatRoom_JoinChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcService/services.proto",
}
