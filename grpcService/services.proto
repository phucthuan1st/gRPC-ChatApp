syntax = "proto3";
package grpcService;

option go_package = "https://github.com/phucthuan1st/gRPC-ChatRoom/grpcService";

// credentials that use for login purpose only
message UserLoginCredentials {
  string username = 1;
  string password = 2;
}

message Address {
  optional string street = 1;
  optional string city = 2;
  string country = 3;
}

// User infomation, created when register
message User {
  string username = 1;
  string password = 2;
  string full_name = 3;
  optional string email = 4;
  optional string birthdate = 5;
  optional Address address = 6;
}

// User infomation, retrieve when needed
message PublicUserInfo {
  string username = 1;
  string full_name = 2;
  optional string email = 3;
  optional string birthdate = 4;
  optional Address address = 5;
  int32 status = 6;
}

// A list of user
message UserList { repeated User user = 1; }

// Public user list
message PublicUserInfoList { repeated PublicUserInfo user = 1; }

// Authenticate result when register or login
message AuthenticationResult {
  string username = 1;
  int32 status = 2;
  optional string message = 3;
}

// A message to use in chatroom
message ChatMessage {
  string sender = 1;
  string message = 2;
}

// A message to use in private chat
message PrivateChatMessage {
  string sender = 1;
  string recipent = 3;
  string message = 2;
}

message SentMessageStatus {
  string id = 1;
  int64 timestamp = 2;
  int32 status = 3;
}

message Command { optional string additionalInfo = 1; }

service ChatRoom {

  // broadcast message to every one in room chat
  rpc Chat(stream ChatMessage) returns (stream ChatMessage);

  // send private message to user (no broadcast)
  rpc SendPrivateMessage(PrivateChatMessage) returns (SentMessageStatus);

  // Register for a new client account
  rpc Register(User) returns (AuthenticationResult);

  // like a user's message, default to their last message
  rpc LikeComment(Command) returns (SentMessageStatus);

  // login using a pair of username and password
  rpc Login(UserLoginCredentials) returns (AuthenticationResult);

  // Get a list of information of connected peers or specific peers
  rpc GetConnectedPeers(Command) returns (PublicUserInfoList);

  // Get a peer information (except password)
  rpc GetPeerInfomations(Command) returns (PublicUserInfo);
}